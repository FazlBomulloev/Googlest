from PIL import Image
from mako.testing.helpers import result_lines
from moviepy import (
    VideoFileClip,
    TextClip,
    CompositeVideoClip,
    ImageClip,
)
import time
import os
import uuid
from concurrent.futures import ThreadPoolExecutor, as_completed, ProcessPoolExecutor

from core.repositories.channel import channel_repo

# –ü–æ–¥–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ MoviePy
os.environ["IMAGEIO_FFMPEG_EXE"] = "/usr/local/bin/ffmpeg"

font_path = "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf"


def create_watermarked_video(video_path, watermark_text, output_path, wm):
    video = VideoFileClip(video_path)
    video = video.resized(0.85)  
    
    try:
        if wm:
            font_size = int(video.size[0] * 0.03)
            watermark = TextClip(
                text=watermark_text,
                font_size=font_size,
                color="red",
                font=font_path,
                stroke_color="white",  # –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
                stroke_width=1,  # –®–∏—Ä–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
                method="caption",  # –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
                size=video.size,  # –†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ
                horizontal_align="left",  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
                vertical_align="center",  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
                duration=video.duration,
            ).rotated(30)
            
            # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
            result = CompositeVideoClip([video, watermark])
        else:
            result = CompositeVideoClip([video])
        
        # üîß –£–ù–ò–ö–ê–õ–¨–ù–´–ô –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        unique_temp_audio = f"temp-audio-{uuid.uuid4().hex[:8]}.m4a"
        
        result.write_videofile(
            output_path,
            codec='libx264',          
            audio_codec='aac',        
            temp_audiofile=unique_temp_audio, 
            remove_temp=True,
            preset='medium',          
            ffmpeg_params=[
                '-crf', '23',         
                '-pix_fmt', 'yuv420p', 
                '-movflags', '+faststart',  
                '-max_muxing_queue_size', '1024',  
                '-avoid_negative_ts', 'make_zero'   
            ],
            fps=min(video.fps, 30),   
            verbose=False,
            logger=None
        )
        
        print(f"–í–∏–¥–µ–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º '{watermark_text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}")
        return output_path
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–¥–µ–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º '{watermark_text}': {e}")
        return None
    finally:
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        video.close()
        if 'result' in locals():
            result.close()


def create_watermarked_photo(photo_path, watermark_text, output_path, wm):
    photo = ImageClip(photo_path)
    
    try:
        font_size = int(photo.size[0] * 0.03)
        watermark = TextClip(
            text=watermark_text,
            font_size=font_size,
            color="red",
            font=font_path,
            stroke_color="white",  # –¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏
            stroke_width=1,  # –®–∏—Ä–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏
            method="caption",  # –ú–µ—Ç–æ–¥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞
            size=photo.size,  # –†–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ
            horizontal_align="left",  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é
            vertical_align="center",  # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            duration=photo.duration,
        ).rotated(30)
        
        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if wm:
            result = CompositeVideoClip([photo, watermark])
        else:
            result = CompositeVideoClip([photo])
            
        frame = result.get_frame(0)  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
        img = Image.fromarray(frame)
        img = img.convert("RGB")  # –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Telegram
        img.save(output_path, "JPEG", quality=85, optimize=True)
        
        print(f"–§–æ—Ç–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º '{watermark_text}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {output_path}")
        return output_path
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–æ—Ç–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º '{watermark_text}': {e}")
        return None
    finally:
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        photo.close()
        if 'result' in locals():
            result.close()