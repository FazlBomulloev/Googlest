# -- 3.0.0 - Final version with strict error handling
import asyncio
import datetime
import logging

from deepl.exceptions import QuotaExceededException, AuthorizationException

import deepl

from core.repositories.token import token_repo
from core.repositories.mistral_token import mistral_token_repo
from core.repositories.translator_settings import translator_settings_repo
from core.repositories.mistral_language import mistral_language_repo
from core.repositories.language_channel import language_channel_repo
from utils.mistral_client import (
    MistralClient, 
    MistralRateLimitError, 
    MistralAuthError, 
    MistralAPIError,
    MistralTimeoutError,
    MistralConnectionError
)

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
)
logger = logging.getLogger(__name__)

proxy = {
    "http": "168.80.203.233:8000:HA8kr7:LaeEas",
    "http": "168.81.64.241:8000:GvjxK5:roPDLH",
    "http": "168.81.67.86:8000:GvjxK5:roPDLH",
    "http": "168.81.65.83:8000:GvjxK5:roPDLH",
    "http": "168.81.65.230:8000:GvjxK5:roPDLH",
    "http": "168.80.201.196:8000:GvjxK5:roPDLH",
}

# –ú–∞–ø–ø–∏–Ω–≥ —è–∑—ã–∫–æ–≤ –¥–ª—è DeepL
DEEPL_LANGUAGE_MAP = {
    "–ë–æ–ª–≥–∞—Ä—Å–∫–∏–π": "BG",
    "–ß–µ—à—Å–∫–∏–π": "CS", 
    "–ù–µ–º–µ—Ü–∫–∏–π": "DE",
    "–ì—Ä–µ—á–µ—Å–∫–∏–π": "EL",
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "EN-US",
    "–ò—Å–ø–∞–Ω—Å–∫–∏–π": "ES",
    "–§–∏–Ω—Å–∫–∏–π": "FI",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "FR",
    "–í–µ–Ω–≥–µ—Ä—Å–∫–∏–π": "HU",
    "–ò—Ç–∞–ª—å—è–Ω—Å–∫–∏–π": "IT",
    "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π": "NL",
    "–ü–æ–ª—å—Å–∫–∏–π": "PL",
    "–†—É–º—ã–Ω—Å–∫–∏–π": "RO",
    "–°–ª–æ–≤–∞—Ü–∫–∏–π": "SK",
    "–¢—É—Ä–µ—Ü–∫–∏–π": "TR",
    "–†—É—Å—Å–∫–∏–π": "RU"
}


class TranslationError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    pass


async def translate_with_deepl(text: str, language_name: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ DeepL API
    Raises TranslationError –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
    """
    tokens = await token_repo.get_all()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è DeepL
    deepl_lang_code = DEEPL_LANGUAGE_MAP.get(language_name)
    if not deepl_lang_code:
        raise TranslationError(f"Language {language_name} not supported by DeepL")
    
    if not tokens:
        raise TranslationError("No DeepL tokens available")
    
    for token in tokens:
        if not token.status:
            continue
            
        try:
            result = (
                deepl.Translator(token.token, proxy=proxy)
                .translate_text(text, target_lang=deepl_lang_code)
                .text
            )
            logger.info(f"‚úÖ DeepL translation successful ({language_name}): {token.token[:8]}...")
            return result
        except QuotaExceededException:
            unblock_time = datetime.datetime.now() + datetime.timedelta(days=10)
            await token_repo.update_time(token.token, unblock_time)
            await token_repo.update_status(token.token, False)
            logger.warning(f"üö´ DeepL quota exceeded: {token.token[:8]}... Blocked until {unblock_time}")
            continue
        except AuthorizationException:
            await token_repo.del_token(token.token)
            logger.warning(f"‚ùå DeepL token deleted (invalid): {token.token[:8]}...")
            continue
        except Exception as e:
            logger.error(f"‚ùå DeepL error for token {token.token[:8]}...: {str(e)}")
            continue
    
    raise TranslationError("All DeepL tokens exhausted or failed")


async def translate_with_mistral(text: str, language_name: str) -> str:
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ Mistral API —Å —è–∑—ã–∫–æ–≤–æ-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º –∞–≥–µ–Ω—Ç–æ–º
    Raises TranslationError –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω
    """
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    language = await mistral_language_repo.get_by_name(language_name)
    
    if not language:
        raise TranslationError(f"Language {language_name} not found in Mistral languages")
    
    if not language.status:
        raise TranslationError(f"Language {language_name} is disabled")
    
    try:
        client = MistralClient(language.api_key, language.agent_id)
        result = await client.translate(text, language_name)
        if result:
            logger.info(f"‚úÖ Mistral translation successful ({language_name}): {language.api_key[:8]}...")
            return result
        else:
            raise TranslationError(f"Empty response from Mistral for {language_name}")
            
    except MistralRateLimitError:
        unblock_time = datetime.datetime.now() + datetime.timedelta(hours=1)
        await mistral_language_repo.update_status(language.id, False)
        logger.warning(f"üö´ Mistral rate limit ({language_name}): {language.api_key[:8]}... Blocked until {unblock_time}")
        raise TranslationError(f"Mistral rate limit for {language_name}")
        
    except MistralAuthError:
        await mistral_language_repo.update_status(language.id, False)
        logger.warning(f"‚ùå Mistral auth error ({language_name}): {language.api_key[:8]}...")
        raise TranslationError(f"Mistral authentication failed for {language_name}")
        
    except (MistralAPIError, MistralTimeoutError, MistralConnectionError) as e:
        logger.error(f"‚ùå Mistral error ({language_name}) for {language.api_key[:8]}...: {str(e)}")
        raise TranslationError(f"Mistral API error for {language_name}: {str(e)}")


async def get_language_by_channel_id(channel_id: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –ø–æ ID –∫–∞–Ω–∞–ª–∞
    """
    # –ò—â–µ–º –≤ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ —è–∑—ã–∫–æ–≤
    language_channel = await language_channel_repo.get_language_by_channel(channel_id)
    if language_channel:
        language = await mistral_language_repo.get_by_id(language_channel.language_id)
        if language:
            logger.info(f"üéØ Found language {language.name} for channel {channel_id}")
            return language.name
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä—É—Å—Å–∫–∏–π (–¥–ª—è –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞)
    logger.warning(f"‚ö†Ô∏è No language found for channel {channel_id}, using Russian")
    return "–†—É—Å—Å–∫–∏–π"


async def translate(text: str, channel_id: str = None, language_name: str = None) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –°–¢–†–û–ì–û–ô –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    Raises TranslationError –µ—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞
    if language_name:
        target_language = language_name
    elif channel_id:
        target_language = await get_language_by_channel_id(channel_id)
    else:
        target_language = "–†—É—Å—Å–∫–∏–π"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    # –ï—Å–ª–∏ —è–∑—ã–∫ —Ä—É—Å—Å–∫–∏–π - –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º
    if target_language == "–†—É—Å—Å–∫–∏–π":
        logger.info("üá∑üá∫ Russian language detected, skipping translation")
        return text
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
    current_translator = await translator_settings_repo.get_current_translator()
    
    logger.info(f"üåç Translating to {target_language} using {current_translator}")
    
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
    if current_translator == "deepl":
        try:
            return await translate_with_deepl(text, target_language)
        except TranslationError as e:
            logger.warning(f"DeepL failed for {target_language}: {str(e)}, trying Mistral...")
            try:
                return await translate_with_mistral(text, target_language)
            except TranslationError as e2:
                logger.error(f"Both translators failed for {target_language}. DeepL: {str(e)}, Mistral: {str(e2)}")
                # –°–¢–†–û–ì–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞
                raise TranslationError(f"Translation failed for {target_language}: DeepL - {str(e)}, Mistral - {str(e2)}")
    else:  # mistral
        try:
            return await translate_with_mistral(text, target_language)
        except TranslationError as e:
            logger.warning(f"Mistral failed for {target_language}: {str(e)}, trying DeepL...")
            try:
                return await translate_with_deepl(text, target_language)
            except TranslationError as e2:
                logger.error(f"Both translators failed for {target_language}. Mistral: {str(e)}, DeepL: {str(e2)}")
                raise TranslationError(f"Translation failed for {target_language}: Mistral - {str(e)}, DeepL - {str(e2)}")


async def safe_translate(text: str, channel_id: str = None, language_name: str = None) -> tuple[str, bool]:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ç–µ–∫—Å—Ç, —É—Å–ø–µ—à–Ω–æ—Å—Ç—å)
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –±–µ–∑ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    """
    try:
        translated_text = await translate(text, channel_id, language_name)
        return translated_text, True
    except TranslationError as e:
        logger.error(f"üí• Translation failed: {str(e)}")
        return text, False  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª + —Ñ–ª–∞–≥ –æ—à–∏–±–∫–∏
    except Exception as e:
        logger.error(f"üí• Unexpected translation error: {str(e)}")
        return text, False


async def check_deepl():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å DeepL —Ç–æ–∫–µ–Ω–æ–≤
    """
    while True:
        logger.info("üîç Starting DeepL token check")
        tokens = await token_repo.get_all()

        for token in tokens:
            try:
                deepl.Translator(token.token).get_usage()
                await token_repo.update_time(token.token, None)
                await token_repo.update_status(token.token, True)
                logger.info(f"‚úÖ DeepL token valid: {token.token[:8]}...")
            except deepl.QuotaExceededException:
                token_time = await token_repo.get_time_by_token(token.token)

                if token_time is not None:
                    logger.info(f"‚è≥ DeepL token already blocked: {token.token[:8]}...")
                    continue

                unblock_time = datetime.datetime.now() + datetime.timedelta(days=10)
                await token_repo.update_time(token.token, unblock_time)
                await token_repo.update_status(token.token, False)
                logger.warning(f"üö´ DeepL quota exceeded: {token.token[:8]}... Blocked until {unblock_time}")
            except Exception as e:
                logger.error(f"[DEEPL CHECK ERROR] {e}")

        current_time = datetime.datetime.now()

        for token in tokens:
            token_record = await token_repo.get_time_by_token(token.token)

            if token_record.time is not None and current_time > token_record.time:
                try:
                    deepl.Translator(token.token).get_usage()
                    await token_repo.update_status(token.token, True)
                    await token_repo.update_time(token.token, None)
                    logger.info(f"üîì DeepL token reactivated: {token.token[:8]}...")
                except deepl.AuthorizationException:
                    await token_repo.del_token(token.token)
                    logger.warning(f"‚ùå DeepL token deleted (invalid): {token.token[:8]}...")
                except Exception as e:
                    logger.error(f"[DEEPL REACTIVATION ERROR] {e}")

        logger.info("üïí DeepL check sleeping for 24 hours...")
        await asyncio.sleep(86400)


async def check_mistral():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö Mistral —è–∑—ã–∫–æ–≤
    """
    while True:
        logger.info("üîç Starting Mistral languages check")
        languages = await mistral_language_repo.get_all()

        for language in languages:
            try:
                client = MistralClient(language.api_key, language.agent_id)
                is_healthy = await client.check_health()
                
                if is_healthy:
                    await mistral_language_repo.update_status(language.id, True)
                    logger.info(f"‚úÖ Mistral language valid ({language.name}): {language.api_key[:8]}...")
                else:
                    logger.warning(f"‚ö†Ô∏è Mistral language unhealthy ({language.name}): {language.api_key[:8]}...")
                    
            except Exception as e:
                logger.error(f"[MISTRAL CHECK ERROR] for {language.name}: {e}")

        logger.info("üïí Mistral languages check sleeping for 1 hour...")
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å


if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    asyncio.run(translate("–ü—Ä–∏–≤–µ—Ç –º–∏—Ä", language_name="–ß–µ—à—Å–∫–∏–π"))